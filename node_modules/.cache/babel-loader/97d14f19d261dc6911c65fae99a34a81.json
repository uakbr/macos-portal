{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport raf from 'raf';\n/**\r\n *\r\n * useRaf\r\n * Uses a polyfilled version of requestAnimationFrame\r\n * @param {function} callback The callback function to be executed\r\n * @param {boolean} [isActive=true] The value which while true, keeps the raf running infinitely\r\n */\n\nfunction useRaf(callback, isActive) {\n  var savedCallback = useRef(); // Remember the latest function.\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(function () {\n    var startTime, animationFrame;\n\n    function tick() {\n      var timeElapsed = Date.now() - startTime;\n      startTime = Date.now();\n      loop();\n      savedCallback.current && savedCallback.current(timeElapsed);\n    }\n\n    function loop() {\n      animationFrame = raf(tick);\n    }\n\n    if (isActive) {\n      startTime = Date.now();\n      loop();\n      return function () {\n        raf.cancel(animationFrame);\n      };\n    }\n  }, [isActive]);\n}\n\nexport default useRaf;","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { useRef, useEffect } from 'react';\nimport raf from 'raf';\n\n/**\r\n *\r\n * useRaf\r\n * Uses a polyfilled version of requestAnimationFrame\r\n * @param {function} callback The callback function to be executed\r\n * @param {boolean} [isActive=true] The value which while true, keeps the raf running infinitely\r\n */\r\nfunction useRaf(callback, isActive) {\r\n    const savedCallback = useRef();\r\n    // Remember the latest function.\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n    useEffect(() => {\r\n        let startTime, animationFrame;\r\n        function tick() {\r\n            const timeElapsed = Date.now() - startTime;\r\n            startTime = Date.now();\r\n            loop();\r\n            savedCallback.current && savedCallback.current(timeElapsed);\r\n        }\r\n        function loop() {\r\n            animationFrame = raf(tick);\r\n        }\r\n        if (isActive) {\r\n            startTime = Date.now();\r\n            loop();\r\n            return () => {\r\n                raf.cancel(animationFrame);\r\n            };\r\n        }\r\n    }, [isActive]);\r\n}\n\nexport default useRaf;\n//# sourceMappingURL=index.esm.js.map\n"]},"metadata":{},"sourceType":"module"}